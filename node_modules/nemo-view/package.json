{
  "name": "nemo-view",
  "version": "0.2.4",
  "description": "View Interface for nemo views (requires nemo-drivex and nemo-locatex plugins)",
  "main": "index.js",
  "registerAs": "view",
  "scripts": {
    "test": "grunt --grep @travis@"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/paypal/nemo-view.git"
  },
  "dependencies": {
    "async": "~0.2.8"
  },
  "devDependencies": {
    "mocha": "~1.10.0",
    "chai": "~1.6.0",
    "grunt": "~0.4.1",
    "grunt-simple-mocha": "~0.4.0",
    "grunt-contrib-jshint": "^0.7.1",
    "nemo-mocha-factory": "^0.2.0",
    "nemo": "^0.2.0",
    "nemo-drivex": "^0.1.0",
    "nemo-locatex": "^0.1.0",
    "nconf": "*",
    "nemo-shared-objects": "^0.2.0"
  },
  "peerDependencies": {
    "nemo-drivex": "^0.1.0",
    "nemo-locatex": "^0.1.0",
    "nemo": "^0.2.0"
  },
  "keywords": [
    "Nemo",
    "view",
    "interface"
  ],
  "author": {
    "name": "Matt Edelman"
  },
  "license": "http://www.apache.org/licenses/LICENSE-2.0",
  "readme": "## nemo-view\n\nView Interface for nemo views\n\n[![Build Status](https://travis-ci.org/paypal/nemo-view.svg?branch=master)](https://travis-ci.org/paypal/nemo-view)\n\n### Peer Dependencies\n\n* nemo-locatex\n* nemo-drivex\n\n### Installation\n\n1. Add dependencies to package.json and install.\n\n```javascript\n\t...\n    \"nemo\": \"^0.1.0\",\n    \"nemo-view\": \"^0.1.0\",\n    \"nemo-drivex\": \"^0.1.0\",\n    \"nemo-locatex\": \"^0.1.0\",\n\t...\n```\n\n2. Add plugins to your nemo plugins JSON object\n\n```javascript\n{\n\t\"plugins\": {\n\t\t\"drivex\": {\n\t\t\t\"module\": \"nemo-drivex\",\n\t\t\t\"register\": true\n\t\t},\n\t\t\"locatex\": {\n\t\t\t\"module\": \"nemo-locatex\",\n\t\t\t\"register\": true\n\t\t},\n\t\t\"view\": {\n\t\t\t\"module\": \"nemo-view\"\n\t\t}\n\t}\n}\n```\n\n### Writing a locator file\n\nThe locator JSON file describes elements and the locator strategy used for each one. The most common use case is to store\nall your locator files in the `nemo.props.autoBaseDir` + /locator directory\n\n#### textBox.json\n\n```javascript\n{\n\t\"fooText\": {\n\t\t\"locator\": \"#foo input.texty\",\n\t\t\"type\": \"css\"\n\t},\n\t\"fooButton\": {\n\t\t\"locator\": \"#foo input[type='button']\",\n\t\t\"type\": \"css\"\n\t},\n\t\"barText\": {\n\t\t\"locator\": \"#bar input.texty\",\n\t\t\"type\": \"css\"\n\t},\n\t\"barButton\": {\n\t\t\"locator\": \"#bar input[type='button']\",\n\t\t\"type\": \"css\"\n\t},\n\t\"bingText\": {\n\t\t\"locator\": \"#bing input.texty\",\n\t\t\"type\": \"css\"\n\t},\n\t\"bingButton\": {\n\t\t\"locator\": \"#bing input[type='button']\",\n\t\t\"type\": \"css\"\n\t},\n\t\"bangText\": {\n\t\t\"locator\": \"#bang input.texty\",\n\t\t\"type\": \"css\"\n\t},\n\t\"bangButton\": {\n\t\t\"locator\": \"#bang input[type='button']\",\n\t\t\"type\": \"css\"\n\t},\n\t\"outBox\": {\n\t\t\"locator\": \"outy\",\n\t\t\"type\": \"id\"\n\t}\n}\n```\n\n### Using views in spec files\n\nJust specify one or more view by name in the \"view\" namespace of the configuration object (named setup below). Note below we are calling in two view objects, selectBox and textBox.\n\nIn the common use case, make sure the view you request matches the name of the locator file in the `nemo.props.autoBaseDir` + /locator directory.\n\n```javascript\n/*global nemo:true, describe:true, it:true */\nvar plugins = require(\"../config/nemo-plugins\"),\n\tnemoFactory = require(\"nemo-mocha-factory\"),\n\tsetup = {\n\t\t\"view\": [\"selectBox\", \"textBox\"]\n\t};\ndescribe('this is a @nemoSuite@', function() {\n\tnemoFactory({\"plugins\": plugins, \"setup\": setup});\n    it('should open a URL', function(done) {\n        nemo.driver.get(nemo.props.targetBaseUrl).then(function() {\n\t\t\tdone()\n\t\t}, function(err) {\n\t\t\tdone(err);\n\t\t});\n    });\n\tit('should @useNemoViewMethods@', function(done) {\n\t\tnemo.driver.get(nemo.props.targetBaseUrl);\n\t\tnemo.view.textBox.fooText().sendKeys(\"foo\");\n\t\tnemo.view.textBox.fooButton().click();\n\t\tnemo.view.textBox.barText().sendKeys(\"bar\");\n\t\tnemo.view.textBox.barButton().click();\n\t\tnemo.view.textBox.bingText().sendKeys(\"bing\");\n\t\tnemo.view.textBox.bingButton().click();\n\t\tnemo.view.textBox.bangText().sendKeys(\"bang\");\n\t\tnemo.view.textBox.bangButton().click();\n\t\tnemo.view.selectBox.abcOption().click();\n\t\treturn nemo.view.textBox.outBox().getText().then(function (outText) {\n\t\t\tif (outText === \"foobarbingbangabc\") {\n\t\t\t\tdone()\n\t\t\t} else {\n\t\t\t\tdone(new Error(\"Didn't get an OK\"))\n\t\t\t}\n\t\t\t}, function(err) {\n\t\t\t\tdone(err)\n\t\t\t});\n\t});\n});\n\n```\nThe view will automatically require its locator (looking in nemo.props.autoBaseDir/locator). The locator is required and there will be an error unless a locator file of the same name is provided.\n\n#### Putting locators into other directories\n\nIf you want to create a sub-directory structure for locators. E.g. instead of all your locator files under `nemo.props.autoBaseDir` + /locator, you\nprefer to add directory structure under that:\n\n```\n<autoBaseDir>\n  |-locator/\n    |-loggedOut/\n    |   login.json\n    |   signup.json\n    |-loggedIn/\n    |   profile.json\n```\n\nIn this case, you need to specify your views in the nemo setup config a little differently:\n\n```javascript\n/*global nemo:true, describe:true, it:true */\nvar plugins = require(\"../config/nemo-plugins\"),\n\tnemoFactory = require(\"nemo-mocha-factory\"),\n\thomePage = require(\"../page/homePage\"),\n\tsetup = {\n\t\t\"view\": [{\n\t\t\t\t\"name\": \"login\",\n\t\t\t\t\"locator\": \"path:locator/loggedOut/login\"\n\t\t\t}, {\n\t\t\t\t\"name\": \"profile\",\n                \"locator\": \"path:locator/loggedIn/profile\"\n\t\t\t}]\n\t};\n```\n\n#### Putting locators into other commonjs modules\n\nYou may want to use a locator file that someone else created and published as a commonjs module. Using the nemo-paypal-locators module:\n\nAdd it to package.json:\n```javascript\n\"devDependencies\": {\n\t...\n\t\"nemo-paypal-locators\": \"*\",\n\t...\n}\n```\n\n`npm install`\n\nSpecify the view in the nemo setup config\n\n```javascript\n/*global nemo:true, describe:true, it:true */\nvar plugins = require(\"../config/nemo-plugins\"),\n\tnemoFactory = require(\"nemo-mocha-factory\"),\n\thomePage = require(\"../page/homePage\"),\n\tsetup = {\n\t\t\"view\": [{\n\t\t\t\t\"name\": \"login\",\n\t\t\t\t\"locator\": \"module:nemo-paypal-locators/login\"\n\t\t\t}]\n\t};\n```\n### Creating nemo plugins with self contained views and flows\n\nYou may want to publish complete flows as a nemo plugin. That way you can import the functionality and access as a plugin. The following is an example of that.\n\n```javascript\nvar path = require(\"path\");\nmodule.exports = {\n\t\"setup\": function(config, nemo, callback) {\n\t\tvar login = {\n\t\t\t'view': {},\n\t\t\t'locator': {}\n\t\t};\n\t\tvar loginLocator = {\n\t\t\t\"email\": {\n\t\t\t\t\"locator\": \"login_email\",\n\t\t\t\t\"type\": \"id\"\n\t\t\t},\n\t\t\t\"password\": {\n\t\t\t\t\"locator\": \"login_password\",\n\t\t\t\t\"type\": \"id\"\n\t\t\t},\n\t\t\t\"showLogin\": {\n\t\t\t\t\"locator\": \"login-button\",\n\t\t\t\t\"type\": \"id\"\n\t\t\t},\n\t\t\t\"button\": {\n\t\t\t\t\"locator\": \"input[type='submit'][name='submit']\",\n\t\t\t\t\"type\": \"css\"\n\t\t\t},\n\t\t\t\"logoutLink\": {\n\t\t\t\t\"locator\": \"li.logout a\",\n\t\t\t\t\"type\": \"css\"\n\t\t\t},\n\t\t\t\"loggedOutLoginLink\": {\n\t\t\t\t\"locator\": \"li.login a\",\n\t\t\t\t\"type\": \"css\"\n\t\t\t}\n\t\t};\n\t\tvar loginContext = {\n\t\t\t'locator': loginLocator,\n\t\t\t'name': 'login'\n\t\t};\n\t\tlogin.view.login = nemo.view.addView(loginContext, false);\n\t\tlogin.login = function(email, password) {\n\t\t\tvar me = login.view.login;\n\t\t\tnemo.driver.get('https://www.stage2pph20.stage.paypal.com');\n\t\t\tme.showLoginVisible().then(function(isVisible) {\n\t\t\t\tif (isVisible) {\n\t\t\t\t\treturn me.showLogin().click();\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t});\n\t\t\tme.email().clear();\n\t\t\tme.email().sendKeys(email);\n\t\t\tme.password().sendKeys(password);\n\t\t\tme.button().click();\n\t\t\treturn me.logoutLinkWait(10000);\n\t\t};\n\t\tlogin.logout = function() {\n\t\t\tvar me = login.view.login;\n\t\t\tme.logoutLink().click();\n\t\t\t//nemo.driver.sleep(30000);\n\t\t\treturn me.loggedOutLoginLink(10000);\n\t\t};\n\t\tnemo.login = login;\n\t\tcallback(null, config, nemo);\n\n\t}\n};\n```\n\nThe above can be registered as a plugin during nemo setup, and accessed as `nemo.login` within a spec.\n\n### Using multiple views in modules external to spec files\n\nYou will probably want to share functionality between spec files which encapsulate multiple views (called flow modules). And you may want to use multiple of these flow modules in a single spec. In this case, it makes more sense to allow the flow module to specify which view(s) to include instead of specifying the views at the spec level. Use the nemo-view `addView` method in the flow modules to accomplish this.\n\nExample of the top of a flow file `addCard.js`\n```javascript\n'use strict';\n\nfunction addCard(nemo) {\n\tvar CC = nemo.view.addView('CC');\n\tvar allSet = nemo.view.addView('allSet');\n\treturn {\n\t\taddCC: function(cardNumber, date, csc) {\n\t\t\tCC.CCTabLink().click();\n```\n\nThis module can in turn be included in a spec file as below:\n\n```javascript\n'use strict';\nvar assert = require('assert'),\n  nemoFactory = require('nemo-mocha-factory'),\n  nemo = {},\n  plugins = require('../config/nemo-plugins'),\n  addCard = require('../flow/addCard'),\n  addBank = require('../flow/addBank');\n\ndescribe('@p2@FRbank@migrate@', function() {\n  nemoFactory({\n    'plugins': plugins,\n    'context': nemo\n  });\n  before(function(done) {\n    addCard = addCard(nemo);\n    addBank = addBank(nemo);\n    done();\n  )};\n```\n\nNow any of the flow module methods can be used in the spec file, and the correct views will be available in the flow modules.\n\n### View features\n\n#### addView method\n\nThe addView method will be added to the nemo.view namespace with the following signature:\n`nemo.view.addView(viewSpec, addToNamespace);`\n\n__viewSpec__ {String|JSON} will be either a string, or a JSON object to define the view/locator.\n__addToNamespace__ {boolean} (optional, defaults to true) if `false` nemo-view will not attach the view to the `nemo.view` namespace\n\nUsing the addView method, you can add a view at any time using the same formats and conventions as if you are adding them in the Nemo.setup() method. Examples:\n\n```javascript\n//add using a locator in the autoBaseDir/locator directory\nvar myPage = nemo.view.addView('myPage');\nvar login = nemo.view.addView({\n\t\"name\": \"login\",\n\t\"locator\": \"path:locator/loggedOut/login\"\n});\nvar addCard = nemo.view.addView({\n\t\"name\": \"addCard\",\n\t\"locator\": \"module:nemo-paypal-locators/addCard\"\n});\n\nThe addView method will return the view object. It will also dedupe to prevent extra cycles adding the same view multiple times, or overwriting of a view with another of the same name.\n\n```\n\n#### locator methods\nThe view will create the following methods for each locator object:\n\n##### [locatorName]\n\n* arguments: none\n* returns: Promise which resolves to WebElement or rejected\n\n##### [locatorName]Present\n\n* arguments: none\n* returns: Promise which resolves to true or false\n\n##### [locatorName]Wait\n\n* arguments\n  * timeout {Number} time to wait in milliseconds\n  * msg {String} optional. Message to accompany error in failure case\n* returns: Promise which resolves to true or false\n\n##### [locatorName]Visible\n\n* arguments: none\n* returns: Promise which resolves to true or false\n\nAny method in the view object's prototype will also be available for use\n\n##### [locatorName]OptionText\n\n* arguments\n  * text: the text in the option you wish to select\n* returns: Promise which resolves to true when option is selected\n\n##### [locatorName]OptionValue\n\n* arguments\n  * value: the value attribute of the option you wish to select\n* returns: Promise which resolves to true when option is selected\nAny method in the view object's prototype will also be available for use\nOther than that, the nemo-view uses nemo-locatex internally, so if you change your locator files and set LOCALE, nemo-view will handle the rest!\n\n### Using LOCALE specific locators\n\nPlease see these sections in the nemo-locatex README:\n* https://github.com/paypal/nemo-locatex#changing-your-locator-files\n* https://github.com/paypal/nemo-locatex#setting-locale\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/paypal/nemo-view/issues"
  },
  "homepage": "https://github.com/paypal/nemo-view",
  "_id": "nemo-view@0.2.4",
  "_shasum": "31706d622ee4cd267b06214fcc5ca31d77db69cf",
  "_from": "nemo-view@^0.2.4",
  "_resolved": "https://registry.npmjs.org/nemo-view/-/nemo-view-0.2.4.tgz"
}
